(function(){"use strict";self.onmessage=function(r){try{const{file:s,splitHeight:e}=r.data;if(!s){self.postMessage({type:"error",message:"No file provided"});return}if(!(s instanceof File)){self.postMessage({type:"error",message:"Invalid file object provided"});return}if(!e||typeof e!="number"||e<=0){self.postMessage({type:"error",message:"Invalid splitHeight provided. Must be a positive number."});return}if(!s.type.startsWith("image/")){self.postMessage({type:"error",message:"File must be an image"});return}console.log(`Worker received: ${s.name}, splitHeight: ${e}`),p(s,e)}catch(s){console.error("Worker error:",s),self.postMessage({type:"error",message:`Worker processing error: ${s.message}`})}};async function p(r,s){try{self.postMessage({type:"progress",progress:0}),console.log("Starting image processing..."),console.log("Decoding image with createImageBitmap...");const e=await createImageBitmap(r);console.log(`Image decoded successfully. Dimensions: ${e.width} x ${e.height}`);const o=new OffscreenCanvas(e.width,e.height),m=o.getContext("2d");console.log(`OffscreenCanvas created with dimensions: ${o.width} x ${o.height}`),m.drawImage(e,0,0),console.log("Image bitmap drawn to OffscreenCanvas successfully"),console.log(`Verification - OffscreenCanvas: ${o.width} x ${o.height}, Original: ${e.width} x ${e.height}`),o.width===e.width&&o.height===e.height?console.log("✅ OffscreenCanvas dimensions match original image"):console.error("❌ OffscreenCanvas dimensions do not match original image"),self.postMessage({type:"progress",progress:25}),e.close(),console.log("Starting image splitting...");const n=Math.ceil(o.height/s);console.log(`Total chunks to create: ${n}`);for(let t=0;t<n;t++){const i=t*s,a=Math.min(s,o.height-i);console.log(`Processing chunk ${t+1}/${n}, startY: ${i}, height: ${a}`);const g=new OffscreenCanvas(o.width,a);g.getContext("2d").drawImage(o,0,i,o.width,a,0,0,o.width,a);const c=await h(g,"image/jpeg",.9);console.log(`Chunk ${t+1} blob created, size: ${c.size} bytes`),self.postMessage({type:"chunk",blob:c,index:t});const l=Math.round(25+(t+1)/n*70);self.postMessage({type:"progress",progress:l}),console.log(`Chunk ${t+1}/${n} completed, progress: ${l}%`)}console.log("Image splitting completed"),console.log("Sending completion signal..."),self.postMessage({type:"progress",progress:100}),self.postMessage({type:"done"}),console.log("✅ All processing completed successfully")}catch(e){console.error("Error in processImage:",e),self.postMessage({type:"error",message:`Image processing error: ${e.message}`})}}async function h(r,s="image/jpeg",e=.9){return await r.convertToBlob({type:s,quality:e})}})();
