name: 构建和部署到GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 设置pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: 获取pnpm store目录
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: 设置pnpm缓存
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: 安装依赖
      run: pnpm install --frozen-lockfile
      
    - name: 类型检查
      run: pnpm run type-check
      
    - name: 代码检查
      run: pnpm run lint
      continue-on-error: true
      
    - name: 构建所有组件
      run: pnpm run build:full
      
    - name: 多目标部署构建
      run: |
        # 使用多目标部署脚本进行构建和部署准备
        node tools/build-scripts/multi-target-deploy.js --target all --mode both --dry-run
        
        # 将构建结果复制到部署目录
        if [ -d "dist/deploy" ]; then
          cp -r dist/deploy/* deploy/ || mkdir -p deploy
          if [ -d "dist/deploy" ]; then
            cp -r dist/deploy/* deploy/
          fi
        else
          mkdir -p deploy
          echo "警告: 多目标部署脚本未生成预期的输出目录"
          
          # 回退到原有逻辑
          if [ -d "packages/screenshot-splitter/dist" ]; then
            cp -r packages/screenshot-splitter/dist/* deploy/
          fi
          
          mkdir -p deploy/components
          if [ -d "packages/screenshot-splitter/dist-single" ]; then
            mkdir -p deploy/components/screenshot-splitter
            cp -r packages/screenshot-splitter/dist-single/* deploy/components/screenshot-splitter/
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        
    - name: 创建组件索引页面
      run: |
        cat > deploy/components/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>组件库 - Dual Build Monorepo System</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 40px 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    color: #333;
                }
                .container {
                    background: white;
                    border-radius: 12px;
                    padding: 40px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                }
                h1 {
                    color: #2c3e50;
                    text-align: center;
                    margin-bottom: 40px;
                    font-size: 2.5em;
                }
                .component-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 30px;
                    margin-top: 40px;
                }
                .component-card {
                    border: 1px solid #e1e8ed;
                    border-radius: 8px;
                    padding: 24px;
                    background: #f8f9fa;
                    transition: transform 0.2s, box-shadow 0.2s;
                }
                .component-card:hover {
                    transform: translateY(-4px);
                    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                }
                .component-title {
                    font-size: 1.4em;
                    font-weight: 600;
                    color: #2c3e50;
                    margin-bottom: 12px;
                }
                .component-description {
                    color: #666;
                    margin-bottom: 20px;
                    line-height: 1.6;
                }
                .component-links {
                    display: flex;
                    gap: 12px;
                    flex-wrap: wrap;
                }
                .component-link {
                    display: inline-block;
                    padding: 8px 16px;
                    background: #3498db;
                    color: white;
                    text-decoration: none;
                    border-radius: 4px;
                    font-size: 0.9em;
                    transition: background 0.2s;
                }
                .component-link:hover {
                    background: #2980b9;
                }
                .component-link.single {
                    background: #e74c3c;
                }
                .component-link.single:hover {
                    background: #c0392b;
                }
                .back-link {
                    display: inline-block;
                    margin-bottom: 30px;
                    color: #3498db;
                    text-decoration: none;
                    font-weight: 500;
                }
                .back-link:hover {
                    text-decoration: underline;
                }
                .info-box {
                    background: #e8f4fd;
                    border: 1px solid #bee5eb;
                    border-radius: 6px;
                    padding: 20px;
                    margin-bottom: 30px;
                }
                .info-box h3 {
                    margin-top: 0;
                    color: #0c5460;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <a href="../" class="back-link">← 返回主页</a>
                
                <h1>🧩 组件库</h1>
                
                <div class="info-box">
                    <h3>📋 关于组件库</h3>
                    <p>这里展示了所有可用的独立组件。每个组件都提供两种版本：</p>
                    <ul>
                        <li><strong>SPA版本</strong>：多文件结构，适合集成到其他项目中</li>
                        <li><strong>单文件版本</strong>：完整的HTML文件，可以直接在浏览器中打开使用</li>
                    </ul>
                </div>
                
                <div class="component-grid">
                    <div class="component-card">
                        <div class="component-title">📸 长截图分割工具</div>
                        <div class="component-description">
                            智能分割长截图的工具，支持自动检测分割点、手动调整、批量处理等功能。
                            提供直观的预览界面和灵活的导出选项。
                        </div>
                        <div class="component-links">
                            <a href="../" class="component-link">SPA版本</a>
                            <a href="./screenshot-splitter/" class="component-link single">单文件版本</a>
                        </div>
                    </div>
                </div>
            </div>
        </body>
        </html>
        EOF

    - name: 创建主页面
      run: |
        # 创建主页面，如果不存在index.html
        if [ ! -f "deploy/index.html" ]; then
          cat > deploy/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Dual Build Monorepo System</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 40px 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    color: #333;
                }
                .container {
                    background: white;
                    border-radius: 12px;
                    padding: 40px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                }
                h1 {
                    color: #2c3e50;
                    text-align: center;
                    margin-bottom: 40px;
                    font-size: 2.5em;
                }
                .nav-links {
                    display: flex;
                    justify-content: center;
                    gap: 20px;
                    margin-top: 40px;
                    flex-wrap: wrap;
                }
                .nav-link {
                    display: inline-block;
                    padding: 12px 24px;
                    background: #3498db;
                    color: white;
                    text-decoration: none;
                    border-radius: 6px;
                    font-weight: 500;
                    transition: background 0.2s, transform 0.2s;
                }
                .nav-link:hover {
                    background: #2980b9;
                    transform: translateY(-2px);
                }
                .description {
                    text-align: center;
                    font-size: 1.1em;
                    color: #666;
                    line-height: 1.6;
                    margin-bottom: 30px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🚀 Dual Build Monorepo System</h1>
                <div class="description">
                    支持双模式构建的现代化组件库系统<br>
                    提供SPA和单文件两种构建模式，满足不同的使用场景
                </div>
                <div class="nav-links">
                    <a href="./components/" class="nav-link">📦 浏览组件库</a>
                    <a href="https://github.com/your-username/your-repo" class="nav-link">📚 查看源码</a>
                </div>
            </div>
        </body>
        </html>
        EOF
        fi

    - name: 显示部署目录结构
      run: |
        echo "部署目录结构："
        find deploy -type f | head -20
        
    - name: 设置GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: 上传构建产物
      uses: actions/upload-pages-artifact@v3
      with:
        path: './deploy'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 部署到GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4